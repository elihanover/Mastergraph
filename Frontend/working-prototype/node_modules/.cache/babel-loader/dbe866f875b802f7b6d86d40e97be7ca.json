{"ast":null,"code":"import _classCallCheck from \"/Users/tylerangert/Desktop/MASTERGRAPH/prototyping/proto2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tylerangert/Desktop/MASTERGRAPH/prototyping/proto2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tylerangert/Desktop/MASTERGRAPH/prototyping/proto2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tylerangert/Desktop/MASTERGRAPH/prototyping/proto2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tylerangert/Desktop/MASTERGRAPH/prototyping/proto2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tylerangert/Desktop/MASTERGRAPH/prototyping/proto2/src/components/graph/Graph.js\";\nimport React, { Component } from 'react';\nimport Node from './../lib/Node';\nimport Spline from './../lib/Spline';\nimport SVGComponent from './../lib/SVGComponent';\nimport { computeOutOffsetByIndex, computeInOffsetByIndex } from './../lib/util';\n\nvar Graph =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Graph, _Component);\n\n  function Graph(props) {\n    var _this;\n\n    _classCallCheck(this, Graph);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Graph).call(this, props));\n\n    _this.onMouseUp = function (e) {\n      _this.setState({\n        dragging: false\n      });\n    };\n\n    _this.onMouseMove = function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      var svg = _this.refs.svgComponent.refs.svg; //Get svg element position to substract offset top and left\n\n      var svgRect = svg.getBoundingClientRect();\n\n      _this.setState({\n        mousePos: {\n          x: e.pageX - svgRect.left,\n          y: e.pageY - svgRect.top\n        }\n      });\n    };\n\n    _this.handleNodeStart = function (nid) {\n      _this.props.onNodeStartMove(nid);\n    };\n\n    _this.handleNodeStop = function (nid, pos) {\n      _this.props.onNodeMove(nid, pos);\n    };\n\n    _this.handleNodeMove = function (index, pos) {\n      var d = _this.state.data;\n      d.nodes[index].x = pos.x;\n      d.nodes[index].y = pos.y; // this.setState({data : d});\n    };\n\n    _this.handleStartConnector = function (nid, outputIndex) {\n      _this.setState({\n        dragging: true,\n        source: [nid, outputIndex]\n      });\n    };\n\n    _this.handleCompleteConnector = function (nid, inputIndex) {\n      if (_this.state.dragging) {\n        var nodes = _this.state.data.nodes;\n\n        var fromNode = _this.getNodebyId(nodes, _this.state.source[0]);\n\n        var fromPinName = fromNode.fields.out[_this.state.source[1]].name;\n\n        var toNode = _this.getNodebyId(nodes, nid);\n\n        var toPinName = toNode.fields.in[inputIndex].name;\n\n        _this.props.onNewConnector(fromNode.nid, fromPinName, toNode.nid, toPinName);\n      }\n\n      _this.setState({\n        dragging: false\n      });\n    };\n\n    _this.handleRemoveConnector = function (connector) {\n      if (_this.props.onRemoveConnector) {\n        _this.props.onRemoveConnector(connector);\n      }\n    };\n\n    _this.handleNodeSelect = function (nid) {\n      if (_this.props.onNodeSelect) {\n        _this.props.onNodeSelect(nid);\n      }\n    };\n\n    _this.handleNodeDeselect = function (nid) {\n      if (_this.props.onNodeDeselect) {\n        _this.props.onNodeDeselect(nid);\n      }\n    };\n\n    _this.computePinIndexfromLabel = function (pins, pinLabel) {\n      var reval = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = pins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var pin = _step.value;\n\n          if (pin.name === pinLabel) {\n            return reval;\n          } else {\n            reval++;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    };\n\n    _this.getNodebyId = function (nodes, nid) {\n      var reval = 0;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = nodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var node = _step2.value;\n\n          if (node.nid === nid) {\n            return nodes[reval];\n          } else {\n            reval++;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    };\n\n    _this.state = {\n      data: _this.props.data,\n      source: [],\n      dragging: false\n    };\n    return _this;\n  }\n\n  _createClass(Graph, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('mousemove', this.onMouseMove);\n      document.addEventListener('mouseup', this.onMouseUp);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener('mousemove', this.onMouseMove);\n      document.removeEventListener('mouseup', this.onMouseUp);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.setState({\n        data: nextProps.data\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var nodes = this.state.data.nodes;\n      var connectors = this.state.data.connections;\n      var _this$state = this.state,\n          mousePos = _this$state.mousePos,\n          dragging = _this$state.dragging;\n      var i = 0;\n      var newConnector = null;\n\n      if (dragging) {\n        var sourceNode = this.getNodebyId(nodes, this.state.source[0]);\n        var connectorStart = computeOutOffsetByIndex(sourceNode.x, sourceNode.y, this.state.source[1]);\n        var connectorEnd = {\n          x: this.state.mousePos.x,\n          y: this.state.mousePos.y\n        };\n        newConnector = React.createElement(Spline, {\n          start: connectorStart,\n          end: connectorEnd,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        });\n      }\n\n      var splineIndex = 0;\n      return React.createElement(\"div\", {\n        className: dragging ? 'dragging' : '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, nodes.map(function (node) {\n        return React.createElement(Node, {\n          index: i++,\n          nid: node.nid,\n          title: node.title,\n          type: node.type,\n          parameters: node.parameters,\n          inputs: node.fields.in,\n          outputs: node.fields.out,\n          pos: {\n            x: node.x,\n            y: node.y\n          },\n          key: node.nid,\n          onNodeStart: function onNodeStart(nid) {\n            return _this2.handleNodeStart(nid);\n          },\n          onNodeStop: function onNodeStop(nid, pos) {\n            return _this2.handleNodeStop(nid, pos);\n          },\n          onNodeMove: function onNodeMove(index, pos) {\n            return _this2.handleNodeMove(index, pos);\n          },\n          onStartConnector: function onStartConnector(nid, outputIndex) {\n            return _this2.handleStartConnector(nid, outputIndex);\n          },\n          onCompleteConnector: function onCompleteConnector(nid, inputIndex) {\n            return _this2.handleCompleteConnector(nid, inputIndex);\n          },\n          onNodeSelect: function onNodeSelect(nid) {\n            _this2.handleNodeSelect(nid);\n          },\n          onNodeDeselect: function onNodeDeselect(nid) {\n            _this2.handleNodeDeselect(nid);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        });\n      }), React.createElement(SVGComponent, {\n        height: \"100vh\",\n        width: \"100vw\",\n        ref: \"svgComponent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, connectors.map(function (connector) {\n        var fromNode = _this2.getNodebyId(nodes, connector.from_node);\n\n        var toNode = _this2.getNodebyId(nodes, connector.to_node);\n\n        var outIndex = _this2.computePinIndexfromLabel(fromNode.fields.out, connector.from);\n\n        var splineStart = computeOutOffsetByIndex(fromNode.x, fromNode.y, outIndex);\n\n        var inIndex = _this2.computePinIndexfromLabel(toNode.fields.in, connector.to);\n\n        var splineEnd = computeInOffsetByIndex(toNode.x, toNode.y, inIndex);\n        return React.createElement(Spline, {\n          start: splineStart,\n          end: splineEnd,\n          key: splineIndex++,\n          mousePos: mousePos,\n          onRemove: function onRemove() {\n            _this2.handleRemoveConnector(connector);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196\n          },\n          __self: this\n        });\n      }), newConnector));\n    }\n  }]);\n\n  return Graph;\n}(Component);\n\nexport default Graph;","map":{"version":3,"sources":["/Users/tylerangert/Desktop/MASTERGRAPH/prototyping/proto2/src/components/graph/Graph.js"],"names":["React","Component","Node","Spline","SVGComponent","computeOutOffsetByIndex","computeInOffsetByIndex","Graph","props","onMouseUp","e","setState","dragging","onMouseMove","stopPropagation","preventDefault","svg","refs","svgComponent","svgRect","getBoundingClientRect","mousePos","x","pageX","left","y","pageY","top","handleNodeStart","nid","onNodeStartMove","handleNodeStop","pos","onNodeMove","handleNodeMove","index","d","state","data","nodes","handleStartConnector","outputIndex","source","handleCompleteConnector","inputIndex","fromNode","getNodebyId","fromPinName","fields","out","name","toNode","toPinName","in","onNewConnector","handleRemoveConnector","connector","onRemoveConnector","handleNodeSelect","onNodeSelect","handleNodeDeselect","onNodeDeselect","computePinIndexfromLabel","pins","pinLabel","reval","pin","node","document","addEventListener","removeEventListener","nextProps","connectors","connections","i","newConnector","sourceNode","connectorStart","connectorEnd","splineIndex","map","title","type","parameters","from_node","to_node","outIndex","from","splineStart","inIndex","to","splineEnd"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Node from './../lib/Node';\nimport Spline from './../lib/Spline';\nimport SVGComponent from './../lib/SVGComponent';\n\nimport {computeOutOffsetByIndex, computeInOffsetByIndex} from './../lib/util';\n\nclass Graph extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdata : this.props.data,\n\t\t\tsource : [],\n\t\t\tdragging: false\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tdocument.addEventListener('mousemove', this.onMouseMove);\n\t\tdocument.addEventListener('mouseup', this.onMouseUp);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tdocument.removeEventListener('mousemove', this.onMouseMove);\n\t\tdocument.removeEventListener('mouseup', this.onMouseUp);\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\t\tthis.setState({data: nextProps.data});\n\t}\n\n\tonMouseUp = (e) => {\n\t\tthis.setState({dragging:false });\n\t}\n\n\tonMouseMove = (e) => {\n\t\te.stopPropagation();\n  \te.preventDefault();\n\n  \tconst {svgComponent: {refs: {svg}}} = this.refs;\n\n  \t//Get svg element position to substract offset top and left\n  \tconst svgRect = svg.getBoundingClientRect();\n\n\t\tthis.setState({\n\t      mousePos: {\n\t        x: e.pageX - svgRect.left,\n\t        y: e.pageY - svgRect.top\n\t      }\n\t    });\n\t}\n\n\thandleNodeStart = (nid) => {\n\t\tthis.props.onNodeStartMove(nid);\n\t}\n\n\thandleNodeStop = (nid, pos) => {\n\t\tthis.props.onNodeMove(nid, pos);\n\t}\n\n\thandleNodeMove = (index, pos) => {\n\t\tlet d = this.state.data;\n\t\td.nodes[index].x = pos.x;\n\t\td.nodes[index].y = pos.y;\n\t\t// this.setState({data : d});\n\t}\n\n\thandleStartConnector = (nid, outputIndex) => {\n\t\tthis.setState({dragging:true, source:[nid,outputIndex] });\n\t}\n\n\thandleCompleteConnector = (nid, inputIndex) => {\n\t\tif (this.state.dragging) {\n\n\t\t\tlet nodes = this.state.data.nodes;\n\t\t\tlet fromNode = this.getNodebyId(nodes, this.state.source[0]);\n\t\t\tlet fromPinName = fromNode.fields.out[this.state.source[1]].name;\n\t\t\tlet toNode = this.getNodebyId(nodes, nid);\n\t\t\tlet toPinName = toNode.fields.in[inputIndex].name;\n\n\t\t\tthis.props.onNewConnector(fromNode.nid, fromPinName, toNode.nid, toPinName);\n\t\t}\n\t\tthis.setState({dragging:false});\n\t}\n\n\thandleRemoveConnector = (connector) => {\n\t\tif (this.props.onRemoveConnector) {\n\t\t\tthis.props.onRemoveConnector(connector);\n\t\t}\n\t}\n\n  handleNodeSelect = (nid) => {\n\t\tif (this.props.onNodeSelect) {\n\t\t\tthis.props.onNodeSelect(nid);\n\t\t}\n  }\n\n  handleNodeDeselect = (nid) => {\n    if (this.props.onNodeDeselect) {\n      this.props.onNodeDeselect(nid);\n    }\n  }\n\n\tcomputePinIndexfromLabel = (pins, pinLabel) => {\n\t\tlet reval = 0;\n\t\tfor (let pin of pins) {\n\t\t\tif (pin.name === pinLabel) {\n\t\t\t\treturn reval;\n\t\t\t} else {\n\t\t\t\treval++;\n\t\t\t}\n\n\t\t}\n\t}\n\n\tgetNodebyId = (nodes, nid) => {\n\t\tlet reval = 0;\n\n\t\tfor (let node of nodes) {\n\t\t\tif (node.nid === nid) {\n\t\t\t\treturn nodes[reval];\n\t\t\t} else {\n\t\t\t\treval++;\n\t\t\t}\n\t\t}\n\t}\n\n\n\trender() {\n\t\tlet nodes = this.state.data.nodes;\n\t\tlet connectors = this.state.data.connections;\n    let { mousePos, dragging } = this.state;\n\n\t\tlet i = 0;\n\t\tlet newConnector = null;\n\n\t\tif (dragging) {\n\n\t\t\tlet sourceNode = this.getNodebyId(nodes, this.state.source[0]);\n\t\t\tlet connectorStart = computeOutOffsetByIndex(sourceNode.x, sourceNode.y, this.state.source[1]);\n\t\t\tlet connectorEnd = {x:this.state.mousePos.x, y:this.state.mousePos.y};\n\n\t\t\tnewConnector = <Spline\n              \t\t\t\t start={connectorStart}\n              \t\t\t\t end={connectorEnd}\n              \t\t\t />\n\t\t}\n\n\t\tlet splineIndex = 0;\n\n\t\treturn (\n\n\n\t\t\t<div className={dragging ? 'dragging' : ''} >\n\t\t\t\t{nodes.map((node)=> {\n\t\t\t\t\treturn <Node\n    \t\t\t\t\t\t\t\tindex={i++}\n\n    \t\t\t\t\t\t\t\tnid={node.nid}\n    \t\t\t\t\t\t\t\ttitle={node.title}\n\t\t\t\t\t\t\t\t\t\ttype = {node.type}\n\t\t\t\t\t\t\t\t\t\tparameters = {node.parameters}\n\n    \t\t\t\t\t\t\t\tinputs={node.fields.in}\n    \t\t\t\t\t\t\t\toutputs={node.fields.out}\n    \t\t\t\t\t\t\t\tpos={{x : node.x, y: node.y}}\n    \t\t\t\t\t\t\t\tkey={node.nid}\n\n    \t\t\t\t\t\t\t\tonNodeStart={(nid)=>this.handleNodeStart(nid)}\n    \t\t\t\t\t\t\t\tonNodeStop={(nid, pos)=>this.handleNodeStop(nid, pos)}\n    \t\t\t\t\t\t\t\tonNodeMove={(index,pos)=>this.handleNodeMove(index,pos)}\n\n    \t\t\t\t\t\t\t\tonStartConnector={(nid, outputIndex)=>this.handleStartConnector(nid, outputIndex)}\n    \t\t\t\t\t\t\t\tonCompleteConnector={(nid, inputIndex)=>this.handleCompleteConnector(nid, inputIndex)}\n\n\t\t\t\t\t\t\t\t\t\tonNodeSelect={(nid) => {this.handleNodeSelect(nid)}}\n\t\t\t\t\t\t\t\t\t\tonNodeDeselect={(nid) => {this.handleNodeDeselect(nid)}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t})}\n\n\t\t\t\t{/* Render the connectors! */}\n\n\t\t\t\t<SVGComponent height=\"100vh\" width=\"100vw\" ref=\"svgComponent\">\n\n\t\t\t\t\t{connectors.map((connector)=> {\n\t\t\t\t\t\tlet fromNode = this.getNodebyId(nodes,connector.from_node);\n\t\t\t\t\t\tlet toNode = this.getNodebyId(nodes,connector.to_node);\n\n\t\t\t\t\t\tlet outIndex = this.computePinIndexfromLabel(fromNode.fields.out, connector.from);\n\t\t\t\t\t\tlet splineStart = computeOutOffsetByIndex(fromNode.x, fromNode.y, outIndex);\n\n\t\t\t\t\t\tlet inIndex = this.computePinIndexfromLabel(toNode.fields.in, connector.to);\n\t\t\t\t\t\tlet splineEnd = computeInOffsetByIndex(toNode.x, toNode.y, inIndex);\n\n\t\t\t\t\t\treturn <Spline\n\t\t\t\t\t\t\tstart={splineStart}\n\t\t\t\t\t\t\tend={splineEnd}\n\t\t\t\t\t\t\tkey={splineIndex++}\n\t\t\t\t\t\t\tmousePos={mousePos}\n\t\t\t\t\t\t\tonRemove={() => {this.handleRemoveConnector(connector)}}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t})}\n\n\t\t\t\t\t{/* this is our new connector that only appears on dragging */}\n\n\t\t\t\t\t{newConnector}\n\n\t\t\t\t</SVGComponent>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}